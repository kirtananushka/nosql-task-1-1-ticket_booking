{
  "info": {
    "name": "Ticket Booking API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "Find All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a random 5-character numeric string\r",
                  "function generateRandomNumberString(length) {\r",
                  "    let result = '';\r",
                  "    const numbers = '0123456789';\r",
                  "    const numbersLength = numbers.length;\r",
                  "    \r",
                  "    for (let i = 0; i < length; i++) {\r",
                  "        result += numbers.charAt(Math.floor(Math.random() * numbersLength));\r",
                  "    }\r",
                  "    \r",
                  "    return result;\r",
                  "}\r",
                  "\r",
                  "// Store the random string in an environment variable\r",
                  "const randomString = generateRandomNumberString(5);\r",
                  "pm.environment.set(\"rnd\", randomString);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse the response body as a JSON object\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// Set environment variables from the response\r",
                  "pm.environment.set(\"currentBookingUserId\", jsonData.id);\r",
                  "pm.environment.set(\"currentBookingUserFirstName\", jsonData.firstName);\r",
                  "pm.environment.set(\"currentBookingUserLastName\", jsonData.lastName);\r",
                  "pm.environment.set(\"currentBookingUserEmail\", jsonData.email);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstName\": \"Gocha\",\r\n    \"lastName\": \"Takamadze\",\r\n    \"email\": \"gocha.takamadze.{{rnd}}@example.com\"\r\n}\r\n"
            },
            "url": {
              "raw": "http://localhost:8080/users",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Find Created User By ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/{{currentBookingUserId}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{currentBookingUserId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Created User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstName\": \"Giorgi Updated\",\r\n    \"lastName\": \"Bagrationi\",\r\n    \"email\": \"{{currentBookingUserEmail}}\"\r\n}"
            },
            "url": {
              "raw": "http://localhost:8080/users/{{currentBookingUserId}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{currentBookingUserId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Refill Created User Account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"amount\": 100.00\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8080/users/{{currentBookingUserId}}/refill",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{currentBookingUserId}}",
                "refill"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Created User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/users/{{currentBookingUserId}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "users",
                "{{currentBookingUserId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "Find All Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Event",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a random 5-character numeric string\r",
                  "function generateRandomNumberString(length) {\r",
                  "    let result = '';\r",
                  "    const numbers = '0123456789';\r",
                  "    const numbersLength = numbers.length;\r",
                  "    \r",
                  "    for (let i = 0; i < length; i++) {\r",
                  "        result += numbers.charAt(Math.floor(Math.random() * numbersLength));\r",
                  "    }\r",
                  "    \r",
                  "    return result;\r",
                  "}\r",
                  "\r",
                  "// Store the random string in an environment variable\r",
                  "const randomString = generateRandomNumberString(5);\r",
                  "pm.environment.set(\"rnd\", randomString);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse the response body as a JSON object\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// Set environment variables from the response\r",
                  "pm.environment.set(\"currentBookingEventId\", jsonData.id);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"title\": \"New Event - {{rnd}}\",\r\n    \"date\": \"2024-10-10T19:00:00\",\r\n    \"ticketPrice\": 50.00\r\n}"
            },
            "url": {
              "raw": "http://localhost:8080/events",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Find Created Event By ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events/{{currentBookingEventId}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events",
                "{{currentBookingEventId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Created Event",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"title\": \"Updated Event\",\r\n    \"date\": \"2024-10-15T20:00:00\",\r\n    \"ticketPrice\": 75.00\r\n}"
            },
            "url": {
              "raw": "http://localhost:8080/events/{{currentBookingEventId}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events",
                "{{currentBookingEventId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Created Event",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/events/{{currentBookingEventId}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "events",
                "{{currentBookingEventId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tickets",
      "item": [
        {
          "name": "Find All Tickets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/tickets",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "tickets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Book Ticket",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a random number between 1 and 99\r",
                  "function generateRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// Store the random number in an environment variable\r",
                  "const randomNumber = generateRandomNumber(1, 99);\r",
                  "pm.environment.set(\"rnd\", randomNumber);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Parse the response body as a JSON object\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// Set environment variables from the response\r",
                  "pm.environment.set(\"currentBookingTicketId\", jsonData.id);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"user\": {\r\n        \"id\": \"{{currentBookingUserId}}\"\r\n    },\r\n    \"event\": {\r\n        \"id\": \"{{currentBookingEventId}}\"\r\n    },\r\n    \"seatNumber\": {{rnd}},\r\n    \"category\": \"VIP\"\r\n}"
            },
            "url": {
              "raw": "http://localhost:8080/tickets",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "tickets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Cancel Created Ticket",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/tickets/{{currentBookingTicketId}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "tickets",
                "{{currentBookingTicketId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Aggregation",
      "item": [
        {
          "name": "Get Tickets Grouped by Date",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/tickets/aggregation/group-by-date",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "tickets",
                "aggregation",
                "group-by-date"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tickets Grouped by Category",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/tickets/aggregation/group-by-category",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "tickets",
                "aggregation",
                "group-by-category"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tickets Grouped by Category and Date",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8080/tickets/aggregation/group-by-category-and-date",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "tickets",
                "aggregation",
                "group-by-category-and-date"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}